#include "lexer/token.hpp"

const char* tokenTypeToString(TokenType type) {
    switch (type) {
        case TokenType::INVALID:
            return "INVALID";
        case TokenType::EOI:
            return "EOI";
        case TokenType::KEY_ASM:
            return "KEY_ASM";
        case TokenType::KEY_AUTO:
            return "KEY_AUTO";
        case TokenType::KEY_BOOL:
            return "KEY_BOOL";
        case TokenType::KEY_BREAK:
            return "KEY_BREAK";
        case TokenType::KEY_CASE:
            return "KEY_CASE";
        case TokenType::KEY_CLASS:
            return "KEY_CLASS";
        case TokenType::KEY_CONST:
            return "KEY_CONST";
        case TokenType::KEY_CONST_CAST:
            return "KEY_CONST_CAST";
        case TokenType::KEY_CONTINUE:
            return "KEY_CONTINUE";
        case TokenType::KEY_DEFAULT:
            return "KEY_DEFAULT";
        case TokenType::KEY_DELETE:
            return "KEY_DELETE";
        case TokenType::KEY_DO:
            return "KEY_DO";
        case TokenType::KEY_DOUBLE:
            return "KEY_DOUBLE";
        case TokenType::KEY_DYNAMIC_CAST:
            return "KEY_DYNAMIC_CAST";
        case TokenType::KEY_ELSE:
            return "KEY_ELSE";
        case TokenType::KEY_ENUM:
            return "KEY_ENUM";
        case TokenType::KEY_EXPLICIT:
            return "KEY_EXPLICIT";
        case TokenType::KEY_EXPORT:
            return "KEY_EXPORT";
        case TokenType::KEY_EXTERN:
            return "KEY_EXTERN";
        case TokenType::KEY_FALSE:
            return "KEY_FALSE";
        case TokenType::KEY_FLOAT:
            return "KEY_FLOAT";
        case TokenType::KEY_FOR:
            return "KEY_FOR";
        case TokenType::KEY_FRIEND:
            return "KEY_FRIEND";
        case TokenType::KEY_GOTO:
            return "KEY_GOTO";
        case TokenType::KEY_IF:
            return "KEY_IF";
        case TokenType::KEY_INLINE:
            return "KEY_INLINE";
        case TokenType::KEY_INT:
            return "KEY_INT";
        case TokenType::KEY_LONG:
            return "KEY_LONG";
        case TokenType::KEY_MUTABLE:
            return "KEY_MUTABLE";
        case TokenType::KEY_NAMESPACE:
            return "KEY_NAMESPACE";
        case TokenType::KEY_NEW:
            return "KEY_NEW";
        case TokenType::KEY_OPERATOR:
            return "KEY_OPERATOR";
        case TokenType::KEY_PRIVATE:
            return "KEY_PRIVATE";
        case TokenType::KEY_PROTECTED:
            return "KEY_PROTECTED";
        case TokenType::KEY_PUBLIC:
            return "KEY_PUBLIC";
        case TokenType::KEY_REGISTER:
            return "KEY_REGISTER";
        case TokenType::KEY_REINTERPRET_CAST:
            return "KEY_REINTERPRET_CAST";
        case TokenType::KEY_RETURN:
            return "KEY_RETURN";
        case TokenType::KEY_SHORT:
            return "KEY_SHORT";
        case TokenType::KEY_SIGNED:
            return "KEY_SIGNED";
        case TokenType::KEY_SIZEOF:
            return "KEY_SIZEOF";
        case TokenType::KEY_STATIC:
            return "KEY_STATIC";
        case TokenType::KEY_STATIC_CAST:
            return "KEY_STATIC_CAST";
        case TokenType::KEY_STRUCT:
            return "KEY_STRUCT";
        case TokenType::KEY_SWITCH:
            return "KEY_SWITCH";
        case TokenType::KEY_TEMPLATE:
            return "KEY_TEMPLATE";
        case TokenType::KEY_THIS:
            return "KEY_THIS";
        case TokenType::KEY_THROW:
            return "KEY_THROW";
        case TokenType::KEY_TRUE:
            return "KEY_TRUE";
        case TokenType::KEY_TRY:
            return "KEY_TRY";
        case TokenType::KEY_TYPEDEF:
            return "KEY_TYPEDEF";
        case TokenType::KEY_TYPEID:
            return "KEY_TYPEID";
        case TokenType::KEY_TYPENAME:
            return "KEY_TYPENAME";
        case TokenType::KEY_UNION:
            return "KEY_UNION";
        case TokenType::KEY_UNSIGNED:
            return "KEY_UNSIGNED";
        case TokenType::KEY_USING:
            return "KEY_USING";
        case TokenType::KEY_VIRTUAL:
            return "KEY_VIRTUAL";
        case TokenType::KEY_VOID:
            return "KEY_VOID";
        case TokenType::KEY_VOLATILE:
            return "KEY_VOLATILE";
        case TokenType::KEY_WCHAR_T:
            return "KEY_WCHAR_T";
        case TokenType::KEY_WHILE:
            return "KEY_WHILE";
        case TokenType::ID:
            return "ID";
        case TokenType::PLUS:
            return "PLUS";
        case TokenType::MINUS:
            return "MINUS";
        case TokenType::STAR:
            return "STAR";
        case TokenType::DIV:
            return "DIV";
        case TokenType::MOD:
            return "MOD";
        case TokenType::LSHIFT:
            return "LSHIFT";
        case TokenType::RSHIFT:
            return "RSHIFT";
        case TokenType::BITAND:
            return "BITAND";
        case TokenType::BITOR:
            return "BITOR";
        case TokenType::XOR:
            return "XOR";
        case TokenType::BITNOT:
            return "BITNOT";
        case TokenType::INCREMENT:
            return "INCREMENT";
        case TokenType::DECREMENT:
            return "DECREMENT";
        case TokenType::EQUAL:
            return "EQUAL";
        case TokenType::NOTEQUAL:
            return "NOTEQUAL";
        case TokenType::LESS:
            return "LESS";
        case TokenType::LESSEQ:
            return "LESSEQ";
        case TokenType::GREATER:
            return "GREATER";
        case TokenType::GREATEREQ:
            return "GREATEREQ";
        case TokenType::ARROW:
            return "ARROW";
        case TokenType::DOTSTAR:
            return "DOTSTAR";
        case TokenType::STARROW:
            return "STARROW";
        case TokenType::NOT:
            return "NOT";
        case TokenType::AND:
            return "AND";
        case TokenType::OR:
            return "OR";
        case TokenType::ASSIGN:
            return "ASSIGN";
        case TokenType::ADD_ASSIGN:
            return "ADD_ASSIGN";
        case TokenType::SUB_ASSIGN:
            return "SUB_ASSIGN";
        case TokenType::MUL_ASSIGN:
            return "MUL_ASSIGN";
        case TokenType::DIV_ASSIGN:
            return "DIV_ASSIGN";
        case TokenType::MOD_ASSIGN:
            return "MOD_ASSIGN";
        case TokenType::LSHIFT_ASSIGN:
            return "LSHIFT_ASSIGN";
        case TokenType::RSHIFT_ASSIGN:
            return "RSHIFT_ASSIGN";
        case TokenType::BITAND_ASSIGN:
            return "BITAND_ASSIGN";
        case TokenType::BITOR_ASSIGN:
            return "BITOR_ASSIGN";
        case TokenType::XOR_ASSIGN:
            return "XOR_ASSIGN";
        case TokenType::SCOPE:
            return "SCOPE";
        case TokenType::OPEN_PAR:
            return "OPEN_PAR";
        case TokenType::CLOSE_PAR:
            return "CLOSE_PAR";
        case TokenType::OPEN_CB:
            return "OPEN_CB";
        case TokenType::CLOSE_CB:
            return "CLOSE_CB";
        case TokenType::OPEN_SB:
            return "OPEN_SB";
        case TokenType::CLOSE_SB:
            return "CLOSE_SB";
        case TokenType::QUESTION:
            return "QUESTION";
        case TokenType::COLON:
            return "COLON";
        case TokenType::DOT:
            return "DOT";
        case TokenType::COMMA:
            return "COMMA";
        case TokenType::SEMICOLON:
            return "SEMICOLON";
        case TokenType::LITERAL_STRING:
            return "LITERAL_STRING";
    }
}
